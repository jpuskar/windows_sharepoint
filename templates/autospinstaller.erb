function Get-Password(){
  Param(
    [Parameter(Mandatory = $true)]
    [String] $account,
    [Parameter(Mandatory = $true)]
    [String] $userxml
  )
  
  [xml]$xml = New-Object system.Xml.XmlDocument
  [xml]$xml = Get-Content $userxml
  Foreach ($user in $xml.configuration.users.user) {
    If($user.name -eq $account) {
      Return $user.password;
    }
  }
}

$basepath = "<%= @base_path%>";
$path = $basepath + "\\Puppet-SharePoint\\";
$xmlpath = $path + "AutoSPInstaller\AutoSPInstallerInput.xml"
[xml]$xml = New-Object system.Xml.XmlDocument
[xml]$xml = Get-Content $xmlpath

## XML for users password
$userxml = "<%= @user_xml%>";

## Install parameters
$key = "<%= @key%>";
$offline = "<%= @offline%>";
$autoadminlogon   = "<%= @auto_admin_logon%>";
$setupaccountpassword   = "<%= @setup_account_password%>";
$disableloopbackcheck   = "<%= @disable_loopback_check%>";
$disableunusedservices   = "<%= @disable_unused_services%>";
$disableieenhancedsecurity  = "<%= @disable_ie_enhanced_security%>";
$disablecertificaterevocationlistcheck  = "<%= @certificate_revocation_list_check%>";

## Farm parameters
$passphrase = "<%= @pass_phrase%>";
$spfarmaccount = "<%= @sp_farm_account%>";
$spfarmpassword = "<%= @sp_farm_password%>";

$centraladminprovision = "<%= @central_admin_provision%>";
$centraladmindatabase = "<%= @central_admin_database%>";
$centraladminport = "<%= @central_admin_port%>";
$centraladminssl = "<%= @central_admin_ssl%>";

$dbserver = "<%= @db_server%>";
$dbalias = "<%= @db_alias%>";
$dbaliasport = "<%= @db_alias_port%>";
$dbaliasinstance = "<%= @db_alias_instance%>";
$dbprefix  = "<%= @db_prefix%>";
$dbuser = "<%= @db_user%>";
$dbpassword = "<%= @db_password%>";
$configdb = "<%= @config_db%>";

## Services part
$sanboxedcodeservicestart = "<%= @sanboxed_code_service_start%>";
$claimstowindowstokenserverstart = "<%= @claims_to_windows_token_server_start%>";
$claimstowindowstokenserverupdateaccount = "<%= @claims_to_windows_token_server_update_account%>";

$smtpinstall = "<%= @smtp_install%>";
$smtpoutgoingemailconfigure = "<%= @smtp_outgoing_email_configure%>";
$smtpoutgoingserver = "<%= @smtp_outgoing_server%>";
$smtpoutgoingemailaddress = "<%= @smtp_outgoing_email_address%>";
$smtpoutgoingreplytoemail  = "<%= @smtp_outgoing_reply_to_email%>";

$incomingemailstart = "<%= @incoming_email_start%>";
$distributedcachestart = "<%= @distributed_cache_start%>";
$workflowtimerstart = "<%= @workflow_timer_start%>";
$foundationwebapplicationstart = "<%= @foundation_web_application_start%>";

$spapppoolaccount = "<%= @sp_app_pool_account%>";
$spapppoolpassword = "<%= @sp_app_pool_password%>";
$spservicesaccount = "<%= @sp_services_account%>";
$spservicespassword = "<%= @sp_services_password%>";
$spsearchaccount = "<%= @sp_search_account%>";
$spsearchpassword = "<%= @sp_search_password%>";
$spsuperreaderaccount = "<%= @sp_super_reader_account%>";
$spsuperuseraccount = "<%= @sp_super_user_account%>";
$spcrawlaccount = "<%= @sp_crawl_account%>";
$spcrawlpassword = "<%= @sp_crawl_password%>";
$spsyncaccount = "<%= @sp_sync_account%>";
$spsyncpassword = "<%= @sp_sync_password%>";
$spusrprfaccount = "<%= @sp_usr_prf_account%>";
$spusrprfpassword = "<%= @sp_usr_prf_password%>";
$spexcelaccount = "<%= @sp_excel_account%>";
$spexcelpassword = "<%= @sp_excel_password%>";
## Log
$logcompress = "<%= @log_compress%>";
$iislogspath = "<%= @iis_logs_path%>";
$ulslogspath = "<%= @uls_logs_path%>";
$usagelogspath = "<%= @usage_logs_path%>";

$spversion = "<%= @sp_version%>";
$computername = "<%= @computer_name%>";
$removedefaultwebapp = "<%= @remove_default_web_app%>";

## WebApp
$webappurl = "<%= @web_app_url%>";
$applicationPool = "<%= @application_pool%>";
$webappname = "<%= @web_app_name%>";
$webappport = "<%= @web_app_port%>";
$webappdatabasename = "<%= @web_app_database_name%>";

if($spversion -ne 'Foundation'){
$mysitemanagedpath = "<%= @mysite_managed_path %>";
$mysitehost = "<%= @mysite_host %>";
}
##DefaultSiteCol
$siteUrl = "<%= @site_url%>";
$sitecolname = "<%= @site_col_name%>";
$sitecoltemplate = "<%= @site_col_template%>";
$sitecoltime24 = "<%= @site_col_time24%>";
$sitecollcid = "<%= @site_col_lcid%>";
$sitecollocale = "<%= @site_col_locale%>";
$sitecolowner = "<%= @site_col_owner%>";

### Part get password if not specified

### Part set XML info

## Install

if($spversion -eq "Foundation") {
  $child = $xml.Configuration.Install.SelectSingleNode("PIDKey")
  $xml.Configuration.Install.RemoveChild($child)
} else {
  $xml.Configuration.Install.PIDKey = $key;
}
$xml.Configuration.Install.SKU = $spversion;
$xml.Configuration.Install.OfflineInstall = $offline;
$xml.Configuration.Install.AutoAdminLogon.Enable = $autoadminlogon;
$xml.Configuration.Install.AutoAdminLogon.Password = $setupaccountpassword;

$xml.Configuration.Install.Disable.LoopbackCheck = $disableloopbackcheck;
$xml.Configuration.Install.Disable.UnusedServices = $disableunusedservices;
$xml.Configuration.Install.Disable.IEEnhancedSecurity = $disableieenhancedsecurity;
$xml.Configuration.Install.Disable.CertificateRevocationListCheck = $disablecertificaterevocationlistcheck;
# $xml.Configuration.Install.RemoteInstall.Enable = $false;

## Farm
$xml.Configuration.Farm.Passphrase = $passphrase;
$xml.Configuration.Farm.Account.Username = $spfarmaccount;
if($spfarmpassword -eq $null -or $spfarmpassword -eq ""){
  $xml.Configuration.Farm.Account.Password = Get-Password -account $spfarmaccount -userxml $userxml;
}else{
  $xml.Configuration.Farm.Account.Password = $spfarmpassword;
}

$xml.Configuration.Farm.CentralAdmin.Provision = $centraladminprovision;
$xml.Configuration.Farm.CentralAdmin.Database = $centraladmindatabase;
$xml.Configuration.Farm.CentralAdmin.Port = $centraladminport;
$xml.Configuration.Farm.CentralAdmin.UseSSL = $centraladminssl;
$xml.Configuration.Farm.Database.DBServer = $dbserver;
$xml.Configuration.Farm.Database.DBAlias.Create = $dbalias;
$xml.Configuration.Farm.Database.DBAlias.DBInstance = $dbaliasinstance;
$xml.Configuration.Farm.Database.DBAlias.DBPort = $dbaliasport;
$xml.Configuration.Farm.Database.DBPrefix = $dbprefix;
$xml.Configuration.Farm.Database.ConfigDB = $configdb;

# Services
$xml.Configuration.Farm.Services.SandboxedCodeService.Start = $sanboxedcodeservicestart;
$xml.Configuration.Farm.Services.ClaimsToWindowsTokenService.Start = $claimstowindowstokenserverstart;
$xml.Configuration.Farm.Services.SMTP.Install = $smtpinstall;
$xml.Configuration.Farm.Services.FoundationWebApplication.Start = $foundationwebapplicationstart;

#managed account
foreach($manageaccount in $xml.Configuration.Farm.ManagedAccounts.ManagedAccount){
  if($manageaccount.CommonName -eq "spservice"){
    $manageaccount.Username = $spservicesaccount;
    if($spservicespassword -eq $null -or $spservicespassword -eq ""){
      $manageaccount.Password = Get-Password -account $spservicesaccount -userxml $userxml;
    }else{
      $manageaccount.Password = $spservicespassword;
    }
  }elseif($manageaccount.CommonName -eq "Portal"){
    $manageaccount.Username = $spapppoolaccount;
    if($spapppoolpassword -eq $null -or $spapppoolpassword -eq ""){
      $manageaccount.Password = Get-Password -account $spapppoolaccount -userxml $userxml;
    }else{
      $manageaccount.Password = $spapppoolpassword;
    }
  }elseif($manageaccount.CommonName -eq "SearchService"){
    $manageaccount.Username = $spsearchaccount;
    if($spsearchpassword -eq $null -or $spsearchpassword -eq ""){
      $manageaccount.Password = Get-Password -account $spsearchaccount -userxml $userxml;
    }else{
      $manageaccount.Password = $spsearchpassword;
    }
  }elseif($manageaccount.CommonName -eq "MySiteHost"){
    $manageaccount.Username = $spusrprfaccount;
    if($spusrprfpassword -eq $null -or $spusrprfpassword -eq ""){
      $manageaccount.Password = Get-Password -account $spusrprfaccount -userxml $userxml;
    }else{
      $manageaccount.Password = $spusrprfpassword;
    }
  }
}
$xml.Configuration.Farm.ObjectCacheAccounts.SuperUser = $spsuperuseraccount;
$xml.Configuration.Farm.ObjectCacheAccounts.SuperReader = $spsuperreaderaccount

#Logging
$xml.Configuration.Farm.Logging.IISLogs.Compress = $logcompress;
$xml.Configuration.Farm.Logging.IISLogs.Path = $iislogspath;
$xml.Configuration.Farm.Logging.ULSLogs.Compress = $logcompress;
$xml.Configuration.Farm.Logging.ULSLogs.LogLocation = $ulslogspath;
$xml.Configuration.Farm.Logging.UsageLogs.Compress = $logcompress;
$xml.Configuration.Farm.Logging.UsageLogs.UsageLogDir = $usagelogspath;

##WebApp
$xml.Configuration.WebApplications.WebApplication.Get(0).name = $webappname;
$xml.Configuration.WebApplications.WebApplication.Get(0).applicationPool = $applicationPool;
$xml.Configuration.WebApplications.WebApplication.Get(0).url = $webappurl;
$xml.Configuration.WebApplications.WebApplication.Get(0).port = $webappport;
$xml.Configuration.WebApplications.WebApplication.Get(0).Database.Name = $webappdatabasename;
$xml.Configuration.WebApplications.WebApplication.Get(0).Database.DBServer = $dbserver;

##Sitecollection
$xml.Configuration.WebApplications.WebApplication.Get(0).SiteCollections.SiteCollection.siteUrl = $siteUrl;
$xml.Configuration.WebApplications.WebApplication.Get(0).SiteCollections.SiteCollection.SearchUrl = $siteUrl+"/search";
$xml.Configuration.WebApplications.WebApplication.Get(0).SiteCollections.SiteCollection.name = $sitecolname;
$xml.Configuration.WebApplications.WebApplication.Get(0).SiteCollections.SiteCollection.Template = $sitecoltemplate;
$xml.Configuration.WebApplications.WebApplication.Get(0).SiteCollections.SiteCollection.Time24 = $sitecoltime24;
$xml.Configuration.WebApplications.WebApplication.Get(0).SiteCollections.SiteCollection.LCID = $sitecollcid;
$xml.Configuration.WebApplications.WebApplication.Get(0).SiteCollections.SiteCollection.Locale = $sitecollocale;
$xml.Configuration.WebApplications.WebApplication.Get(0).SiteCollections.SiteCollection.Owner = $sitecolowner;

##switch all alias to the one defined
#$xml.Configuration.ServiceApps.ManagedMetadataServiceApp.Database.DBServer = $dbserver;
#$xml.Configuration.ServiceApps.UserProfileServiceApp.Database.DBServer = $dbserver;
#$xml.Configuration.ServiceApps.EnterpriseSearchService.EnterpriseSearchServiceApplications.EnterpriseSearchServiceApplication.Database.DBServer = $dbserver;
#$xml.Configuration.ServiceApps.StateService.Database.DBServer = $dbserver;
#$xml.Configuration.ServiceApps.SPUsageService.Database.DBServer = $dbserver;
#$xml.Configuration.ServiceApps.SecureStoreService.Database.DBServer = $dbserver;
#$xml.Configuration.ServiceApps.AppManagementService.Database.DBServer = $dbserver;
#$xml.Configuration.ServiceApps.SubscriptionSettingsService.Database.DBServer = $dbserver;
#$xml.Configuration.ServiceApps.WebAnalyticsService.Database.DBServer = $dbserver;
#$xml.Configuration.ServiceApps.MachineTranslationService.Database.DBServer = $dbserver;
#$xml.Configuration.ServiceApps.BusinessDataConnectivity.Database.DBServer = $dbserver;

if($spversion -eq 'Foundation'){
    $xml.Configuration.ServiceApps.EnterpriseSearchService.Provision = "false";
    $xml.Configuration.ServiceApps.WorkManagementService.Provision = "false";
    $xml.Configuration.WebApplications.RemoveChild($xml.Configuration.WebApplications.WebApplication.Get(1))
    $xml.Configuration.Farm.ManagedAccounts.RemoveChild($xml.Configuration.Farm.ManagedAccounts.ManagedAccount.Get(3))
} elseif ($spversion -eq 'Standard' -or $spversion -eq 'Enterprise'){
    $xml.Configuration.ServiceApps.ManagedMetadataServiceApp.Provision = $computername;
    $xml.Configuration.ServiceApps.EnterpriseSearchService.Provision = $computername;
    $xml.Configuration.ServiceApps.UserProfileServiceApp.Provision = $computername;
    $xml.Configuration.ServiceApps.WorkManagementService.Provision = $computername;
    $xml.Configuration.ServiceApps.UserProfileServiceApp.SyncConnectionAccount = $spsyncaccount;
    $xml.Configuration.ServiceApps.UserProfileServiceApp.MySiteHostLocation = $mysitehost;
    $xml.Configuration.ServiceApps.UserProfileServiceApp.MySiteManagedPath = $mysitemanagedpath;

    foreach($webapp in $xml.Configuration.WebApplications.WebApplication){
        if($webapp.type -eq "MySiteHost"){
            $webapp.url = $mysitehost;
            $webapp.Database.DBServer = $dbserver;
            $webapp.ManagedPaths.ManagedPath.relativeUrl = $mysitemanagedpath;
            $webapp.SiteCollections.SiteCollection.siteUrl = $mysitehost;
            $webapp.SiteCollections.SiteCollection.SearchUrl = $mysitehost + "/search";
        }
    }

    if($spsyncpassword -eq $null -or $spsyncpassword -eq ""){
        $xml.Configuration.ServiceApps.UserProfileServiceApp.SyncConnectionAccountPassword = Get-Password -account $spsyncaccount -userxml $userxml;
    } else {
        $xml.Configuration.ServiceApps.UserProfileServiceApp.SyncConnectionAccountPassword = $spsyncpassword;
    }

    $xml.Configuration.ServiceApps.StateService.Provision = $computername;
    $xml.Configuration.ServiceApps.SPUsageService.Provision = $computername;
    $xml.Configuration.ServiceApps.MachineTranslationService.Provision = $computername;
    $xml.Configuration.ServiceApps.SecureStoreService.Provision = $computername;
    $xml.Configuration.ServiceApps.AppManagementService.Provision = $computername;
    $xml.Configuration.ServiceApps.SubscriptionSettingsService.Provision = $computername;
    $xml.Configuration.ServiceApps.BusinessDataConnectivity.Provision = $computername;

    if($spversion -eq 'Enterprise'){
        if($spexcelaccount -ne "" -or $spexcelaccount -ne $null){
            $xml.Configuration.EnterpriseServiceApps.ExcelServices.Provision = "true";
            $xml.Configuration.EnterpriseServiceApps.ExcelServices.UnattendedIDUser = $spexcelaccount;
            if($spexcelpassword -eq $null -or $spexcelpassword -eq ""){
              $xml.Configuration.EnterpriseServiceApps.ExcelServices.UnattendedIDPassword = Get-Password -account $spexcelaccount -userxml $userxml;
            }else{
              $xml.Configuration.EnterpriseServiceApps.ExcelServices.UnattendedIDPassword = $spexcelpassword;
            }
        }
    }
}
##switch user for crawl
$xml.Configuration.ServiceApps.EnterpriseSearchService.EnterpriseSearchServiceApplications.EnterpriseSearchServiceApplication.ContentAccessAccount = $spcrawlaccount;
if($spcrawlpassword -eq $null -or $spcrawlpassword -eq ""){
  $xml.Configuration.ServiceApps.EnterpriseSearchService.EnterpriseSearchServiceApplications.EnterpriseSearchServiceApplication.ContentAccessAccountPassword = Get-Password -account $spcrawlaccount -userxml $userxml;
}else{
  $xml.Configuration.ServiceApps.EnterpriseSearchService.EnterpriseSearchServiceApplications.EnterpriseSearchServiceApplication.ContentAccessAccountPassword = $spcrawlpassword;
}

$msg = "Saving file at: """ + $xmlpath + """.";
write-output $msg;
$xml.save($xmlpath);

if((Test-Path "$path/xmlgenerated") -eq $false){New-Item -Name "xmlgenerated" -Path $path -type file;}
